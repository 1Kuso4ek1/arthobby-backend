/**
 *
 *  Product.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Models/Product.hpp"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::arthobby;

const std::string Product::Cols::_id = "\"id\"";
const std::string Product::Cols::_name = "\"name\"";
const std::string Product::Cols::_price = "\"price\"";
const std::string Product::Cols::_filename = "\"filename\"";
const std::string Product::Cols::_dateofcreation = "\"dateofcreation\"";
const std::string Product::Cols::_type = "\"type\"";
const std::string Product::Cols::_material = "\"material\"";
const std::string Product::Cols::_size = "\"size\"";
const std::string Product::Cols::_article = "\"article\"";
const std::string Product::primaryKeyName = "id";
const bool Product::hasPrimaryKey = true;
const std::string Product::tableName = "\"product\"";

const std::vector<typename Product::MetaData> Product::metaData_={
{"id","int32_t","integer",4,1,1,1},
{"name","std::string","character varying",255,0,0,0},
{"price","std::string","numeric",0,0,0,0},
{"filename","std::string","character varying",255,0,0,0},
{"dateofcreation","::trantor::Date","timestamp without time zone",0,0,0,0},
{"type","std::string","character varying",255,0,0,0},
{"material","std::string","character varying",255,0,0,0},
{"size","std::string","character varying",255,0,0,0},
{"article","std::string","character varying",255,0,0,0}
};
const std::string &Product::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Product::Product(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["price"].isNull())
        {
            price_=std::make_shared<std::string>(r["price"].as<std::string>());
        }
        if(!r["filename"].isNull())
        {
            filename_=std::make_shared<std::string>(r["filename"].as<std::string>());
        }
        if(!r["dateofcreation"].isNull())
        {
            auto timeStr = r["dateofcreation"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                dateofcreation_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        if(!r["type"].isNull())
        {
            type_=std::make_shared<std::string>(r["type"].as<std::string>());
        }
        if(!r["material"].isNull())
        {
            material_=std::make_shared<std::string>(r["material"].as<std::string>());
        }
        if(!r["size"].isNull())
        {
            size_=std::make_shared<std::string>(r["size"].as<std::string>());
        }
        if(!r["article"].isNull())
        {
            article_=std::make_shared<std::string>(r["article"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 9 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            price_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            filename_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                dateofcreation_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            type_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            material_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            size_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            article_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Product::Product(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            filename_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                dateofcreation_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            material_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            size_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            article_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

Product::Product(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("filename"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["filename"].isNull())
        {
            filename_=std::make_shared<std::string>(pJson["filename"].asString());
        }
    }
    if(pJson.isMember("dateofcreation"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["dateofcreation"].isNull())
        {
            auto timeStr = pJson["dateofcreation"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                dateofcreation_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("material"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["material"].isNull())
        {
            material_=std::make_shared<std::string>(pJson["material"].asString());
        }
    }
    if(pJson.isMember("size"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["size"].isNull())
        {
            size_=std::make_shared<std::string>(pJson["size"].asString());
        }
    }
    if(pJson.isMember("article"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["article"].isNull())
        {
            article_=std::make_shared<std::string>(pJson["article"].asString());
        }
    }
}

void Product::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 9)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            price_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            filename_=std::make_shared<std::string>(pJson[pMasqueradingVector[3]].asString());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                dateofcreation_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            type_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            material_=std::make_shared<std::string>(pJson[pMasqueradingVector[6]].asString());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            size_=std::make_shared<std::string>(pJson[pMasqueradingVector[7]].asString());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            article_=std::make_shared<std::string>(pJson[pMasqueradingVector[8]].asString());
        }
    }
}

void Product::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("price"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["price"].isNull())
        {
            price_=std::make_shared<std::string>(pJson["price"].asString());
        }
    }
    if(pJson.isMember("filename"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["filename"].isNull())
        {
            filename_=std::make_shared<std::string>(pJson["filename"].asString());
        }
    }
    if(pJson.isMember("dateofcreation"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["dateofcreation"].isNull())
        {
            auto timeStr = pJson["dateofcreation"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                dateofcreation_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    if(pJson.isMember("type"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["type"].isNull())
        {
            type_=std::make_shared<std::string>(pJson["type"].asString());
        }
    }
    if(pJson.isMember("material"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["material"].isNull())
        {
            material_=std::make_shared<std::string>(pJson["material"].asString());
        }
    }
    if(pJson.isMember("size"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["size"].isNull())
        {
            size_=std::make_shared<std::string>(pJson["size"].asString());
        }
    }
    if(pJson.isMember("article"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["article"].isNull())
        {
            article_=std::make_shared<std::string>(pJson["article"].asString());
        }
    }
}

const int32_t &Product::getValueOfId() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Product::getId() const noexcept
{
    return id_;
}
void Product::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Product::PrimaryKeyType & Product::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Product::getValueOfName() const noexcept
{
    static const std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getName() const noexcept
{
    return name_;
}
void Product::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Product::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}
void Product::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[1] = true;
}

const std::string &Product::getValueOfPrice() const noexcept
{
    static const std::string defaultValue = std::string();
    if(price_)
        return *price_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getPrice() const noexcept
{
    return price_;
}
void Product::setPrice(const std::string &pPrice) noexcept
{
    price_ = std::make_shared<std::string>(pPrice);
    dirtyFlag_[2] = true;
}
void Product::setPrice(std::string &&pPrice) noexcept
{
    price_ = std::make_shared<std::string>(std::move(pPrice));
    dirtyFlag_[2] = true;
}
void Product::setPriceToNull() noexcept
{
    price_.reset();
    dirtyFlag_[2] = true;
}

const std::string &Product::getValueOfFilename() const noexcept
{
    static const std::string defaultValue = std::string();
    if(filename_)
        return *filename_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getFilename() const noexcept
{
    return filename_;
}
void Product::setFilename(const std::string &pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(pFilename);
    dirtyFlag_[3] = true;
}
void Product::setFilename(std::string &&pFilename) noexcept
{
    filename_ = std::make_shared<std::string>(std::move(pFilename));
    dirtyFlag_[3] = true;
}
void Product::setFilenameToNull() noexcept
{
    filename_.reset();
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Product::getValueOfDateofcreation() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(dateofcreation_)
        return *dateofcreation_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Product::getDateofcreation() const noexcept
{
    return dateofcreation_;
}
void Product::setDateofcreation(const ::trantor::Date &pDateofcreation) noexcept
{
    dateofcreation_ = std::make_shared<::trantor::Date>(pDateofcreation);
    dirtyFlag_[4] = true;
}
void Product::setDateofcreationToNull() noexcept
{
    dateofcreation_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Product::getValueOfType() const noexcept
{
    static const std::string defaultValue = std::string();
    if(type_)
        return *type_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getType() const noexcept
{
    return type_;
}
void Product::setType(const std::string &pType) noexcept
{
    type_ = std::make_shared<std::string>(pType);
    dirtyFlag_[5] = true;
}
void Product::setType(std::string &&pType) noexcept
{
    type_ = std::make_shared<std::string>(std::move(pType));
    dirtyFlag_[5] = true;
}
void Product::setTypeToNull() noexcept
{
    type_.reset();
    dirtyFlag_[5] = true;
}

const std::string &Product::getValueOfMaterial() const noexcept
{
    static const std::string defaultValue = std::string();
    if(material_)
        return *material_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getMaterial() const noexcept
{
    return material_;
}
void Product::setMaterial(const std::string &pMaterial) noexcept
{
    material_ = std::make_shared<std::string>(pMaterial);
    dirtyFlag_[6] = true;
}
void Product::setMaterial(std::string &&pMaterial) noexcept
{
    material_ = std::make_shared<std::string>(std::move(pMaterial));
    dirtyFlag_[6] = true;
}
void Product::setMaterialToNull() noexcept
{
    material_.reset();
    dirtyFlag_[6] = true;
}

const std::string &Product::getValueOfSize() const noexcept
{
    static const std::string defaultValue = std::string();
    if(size_)
        return *size_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getSize() const noexcept
{
    return size_;
}
void Product::setSize(const std::string &pSize) noexcept
{
    size_ = std::make_shared<std::string>(pSize);
    dirtyFlag_[7] = true;
}
void Product::setSize(std::string &&pSize) noexcept
{
    size_ = std::make_shared<std::string>(std::move(pSize));
    dirtyFlag_[7] = true;
}
void Product::setSizeToNull() noexcept
{
    size_.reset();
    dirtyFlag_[7] = true;
}

const std::string &Product::getValueOfArticle() const noexcept
{
    static const std::string defaultValue = std::string();
    if(article_)
        return *article_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Product::getArticle() const noexcept
{
    return article_;
}
void Product::setArticle(const std::string &pArticle) noexcept
{
    article_ = std::make_shared<std::string>(pArticle);
    dirtyFlag_[8] = true;
}
void Product::setArticle(std::string &&pArticle) noexcept
{
    article_ = std::make_shared<std::string>(std::move(pArticle));
    dirtyFlag_[8] = true;
}
void Product::setArticleToNull() noexcept
{
    article_.reset();
    dirtyFlag_[8] = true;
}

void Product::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Product::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "name",
        "price",
        "filename",
        "dateofcreation",
        "type",
        "material",
        "size",
        "article"
    };
    return inCols;
}

void Product::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDateofcreation())
        {
            binder << getValueOfDateofcreation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMaterial())
        {
            binder << getValueOfMaterial();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSize())
        {
            binder << getValueOfSize();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getArticle())
        {
            binder << getValueOfArticle();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Product::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    return ret;
}

void Product::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getPrice())
        {
            binder << getValueOfPrice();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getFilename())
        {
            binder << getValueOfFilename();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getDateofcreation())
        {
            binder << getValueOfDateofcreation();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getType())
        {
            binder << getValueOfType();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getMaterial())
        {
            binder << getValueOfMaterial();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getSize())
        {
            binder << getValueOfSize();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getArticle())
        {
            binder << getValueOfArticle();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Product::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getFilename())
    {
        ret["filename"]=getValueOfFilename();
    }
    else
    {
        ret["filename"]=Json::Value();
    }
    if(getDateofcreation())
    {
        ret["dateofcreation"]=getDateofcreation()->toDbStringLocal();
    }
    else
    {
        ret["dateofcreation"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getMaterial())
    {
        ret["material"]=getValueOfMaterial();
    }
    else
    {
        ret["material"]=Json::Value();
    }
    if(getSize())
    {
        ret["size"]=getValueOfSize();
    }
    else
    {
        ret["size"]=Json::Value();
    }
    if(getArticle())
    {
        ret["article"]=getValueOfArticle();
    }
    else
    {
        ret["article"]=Json::Value();
    }
    return ret;
}

Json::Value Product::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 9)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getPrice())
            {
                ret[pMasqueradingVector[2]]=getValueOfPrice();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getFilename())
            {
                ret[pMasqueradingVector[3]]=getValueOfFilename();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getDateofcreation())
            {
                ret[pMasqueradingVector[4]]=getDateofcreation()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getType())
            {
                ret[pMasqueradingVector[5]]=getValueOfType();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getMaterial())
            {
                ret[pMasqueradingVector[6]]=getValueOfMaterial();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getSize())
            {
                ret[pMasqueradingVector[7]]=getValueOfSize();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getArticle())
            {
                ret[pMasqueradingVector[8]]=getValueOfArticle();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getPrice())
    {
        ret["price"]=getValueOfPrice();
    }
    else
    {
        ret["price"]=Json::Value();
    }
    if(getFilename())
    {
        ret["filename"]=getValueOfFilename();
    }
    else
    {
        ret["filename"]=Json::Value();
    }
    if(getDateofcreation())
    {
        ret["dateofcreation"]=getDateofcreation()->toDbStringLocal();
    }
    else
    {
        ret["dateofcreation"]=Json::Value();
    }
    if(getType())
    {
        ret["type"]=getValueOfType();
    }
    else
    {
        ret["type"]=Json::Value();
    }
    if(getMaterial())
    {
        ret["material"]=getValueOfMaterial();
    }
    else
    {
        ret["material"]=Json::Value();
    }
    if(getSize())
    {
        ret["size"]=getValueOfSize();
    }
    else
    {
        ret["size"]=Json::Value();
    }
    if(getArticle())
    {
        ret["article"]=getValueOfArticle();
    }
    else
    {
        ret["article"]=Json::Value();
    }
    return ret;
}

bool Product::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(2, "price", pJson["price"], err, true))
            return false;
    }
    if(pJson.isMember("filename"))
    {
        if(!validJsonOfField(3, "filename", pJson["filename"], err, true))
            return false;
    }
    if(pJson.isMember("dateofcreation"))
    {
        if(!validJsonOfField(4, "dateofcreation", pJson["dateofcreation"], err, true))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(5, "type", pJson["type"], err, true))
            return false;
    }
    if(pJson.isMember("material"))
    {
        if(!validJsonOfField(6, "material", pJson["material"], err, true))
            return false;
    }
    if(pJson.isMember("size"))
    {
        if(!validJsonOfField(7, "size", pJson["size"], err, true))
            return false;
    }
    if(pJson.isMember("article"))
    {
        if(!validJsonOfField(8, "article", pJson["article"], err, true))
            return false;
    }
    return true;
}
bool Product::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Product::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("price"))
    {
        if(!validJsonOfField(2, "price", pJson["price"], err, false))
            return false;
    }
    if(pJson.isMember("filename"))
    {
        if(!validJsonOfField(3, "filename", pJson["filename"], err, false))
            return false;
    }
    if(pJson.isMember("dateofcreation"))
    {
        if(!validJsonOfField(4, "dateofcreation", pJson["dateofcreation"], err, false))
            return false;
    }
    if(pJson.isMember("type"))
    {
        if(!validJsonOfField(5, "type", pJson["type"], err, false))
            return false;
    }
    if(pJson.isMember("material"))
    {
        if(!validJsonOfField(6, "material", pJson["material"], err, false))
            return false;
    }
    if(pJson.isMember("size"))
    {
        if(!validJsonOfField(7, "size", pJson["size"], err, false))
            return false;
    }
    if(pJson.isMember("article"))
    {
        if(!validJsonOfField(8, "article", pJson["article"], err, false))
            return false;
    }
    return true;
}
bool Product::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 9)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Product::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 6:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 7:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 8:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            if(pJson.isString() && std::strlen(pJson.asCString()) > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
